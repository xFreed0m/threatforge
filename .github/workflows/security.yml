name: Security Scan

on:
  push:
    branches: [ main, develop, feat/docker-production-setup ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'

jobs:
  trufflehog:
    name: TruffleHog Secret Scanner
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for comprehensive scanning
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || (github.event.before != '0000000000000000000000000000000000000000' && github.event.before || '') }}
          head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          extra_args: --only-verified
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  gitleaks:
    name: GitLeaks Secret Scanner
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for comprehensive scanning
      
      - name: Run GitLeaks with SARIF output
        id: gitleaks
        run: |
          # Download and run gitleaks directly with explicit SARIF output
          curl -sSfL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_linux_x64.tar.gz | tar -xz
          ./gitleaks detect --config .gitleaks.toml --report-format sarif --report-path results.sarif --verbose --exit-code 0 || true
          
          # Check if any leaks were found
          if [ -f results.sarif ]; then
            echo "sarif-generated=true" >> $GITHUB_OUTPUT
            
            # Check for actual findings
            LEAKS_COUNT=$(jq '.runs[0].results | length' results.sarif 2>/dev/null || echo "0")
            echo "leaks-count=$LEAKS_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$LEAKS_COUNT" -gt 0 ]; then
              echo "⚠️ GitLeaks found $LEAKS_COUNT potential secret(s)"
              # Don't fail the job, let SARIF upload handle it
            else
              echo "✅ GitLeaks found no secrets"
            fi
          else
            echo "sarif-generated=false" >> $GITHUB_OUTPUT
            echo "❌ GitLeaks SARIF report was not generated"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload GitLeaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.gitleaks.outputs.sarif-generated == 'true'
        with:
          sarif_file: results.sarif
          category: gitleaks

  # Additional security checks
  security-checks:
    name: Additional Security Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for hardcoded secrets in code
        run: |
          echo "Checking for common secret patterns..."
          
          # Check for API keys in code files (but exclude npm integrity hashes)
          if grep -r "sk-[a-zA-Z0-9]{20,}" . --include="*.py" --include="*.js" --include="*.vue" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.git --exclude="package-lock.json"; then
            echo "❌ Found potential API keys in code files"
            exit 1
          fi
          
          # Check for hardcoded passwords
          if grep -r "password.*=.*['\"][^'\"]{8,}['\"]" . --include="*.py" --include="*.js" --include="*.vue" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Found potential hardcoded passwords"
            exit 1
          fi
          
          # Check for database URLs with credentials
          if grep -r "postgresql://.*:.*@" . --include="*.py" --include="*.js" --include="*.vue" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Found potential database URLs with credentials"
            exit 1
          fi
          
          echo "✅ No obvious hardcoded secrets found"
      
      - name: Check for .env files in commits
        run: |
          echo "Checking for .env files in recent commits..."
          if git log --name-only --pretty=format: | grep -E "\.env$" | grep -v ".env.example"; then
            echo "❌ Found .env files in git history (excluding .env.example)"
            echo "❌ .env files should not be committed to version control"
          else
            echo "✅ No .env files found in git history"
          fi 